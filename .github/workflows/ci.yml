name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
        tags: ["v*"]
    pull_request:
        branches: [main]

env:
    GO_VERSION: "1.24"
    NODE_VERSION: "22"

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download Go dependencies
              run: go mod download

            - name: Verify Go modules
              run: go mod verify

            - name: Create dummy frontend dist
              run: |
                  mkdir -p gui/peer/frontend/dist
                  echo '{}' > gui/peer/frontend/dist/index.html

            - name: Run Go vet
              run: go vet ./...

            - name: Run Go tests with coverage
              run: |
                  go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
                  go tool cover -html=coverage.out -o coverage.html

            - name: Run benchmarks
              run: go test -v -bench=. -benchmem ./pkg/corepeer

            - name: Upload test artifacts
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: |
                      coverage.out
                      coverage.html

    lint:
        name: Lint Code
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Create dummy frontend dist
              run: |
                  mkdir -p gui/peer/frontend/dist
                  echo '{}' > gui/peer/frontend/dist/index.html

            - name: Run golangci-lint
              uses: golangci/golangci-lint-action@v8
              with:
                  version: v2.1
                  args: --timeout=5m

    build:
        name: Build Applications
        needs: [test, lint]

        strategy:
            fail-fast: false
            matrix:
                build:
                    - name: "App"
                      platform: "linux/amd64"
                      os: "ubuntu-latest"
                    - name: "App"
                      platform: "windows/amd64"
                      os: "windows-latest"
                    - name: "App"
                      platform: "darwin/universal"
                      os: "macos-latest"

        runs-on: ${{ matrix.build.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Set up Node.js (for Wails)
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install Wails (Ubuntu/macOS)
              if: runner.os != 'Windows'
              run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

            - name: Install Wails (Windows)
              if: runner.os == 'Windows'
              run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 10

            - name: Cache pnpm store
              uses: actions/cache@v4
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('gui/peer/frontend/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-

            - name: Install frontend dependencies
              working-directory: gui/peer/frontend
              run: pnpm install --frozen-lockfile

            - name: Set OS Suffix
              id: os_suffix
              run: |
                  if [ "${{ runner.os }}" == "Linux" ]; then
                    echo "suffix=linux" >> $GITHUB_OUTPUT
                  elif [ "${{ runner.os }}" == "Windows" ]; then
                    echo "suffix=windows" >> $GITHUB_OUTPUT
                  elif [ "${{ runner.os }}" == "macOS" ]; then
                    echo "suffix=macos" >> $GITHUB_OUTPUT
                  else
                    echo "suffix=unknown" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Build CLI applications
              run: |
                  OS_SUFFIX=${{ steps.os_suffix.outputs.suffix }}
                  CLI_EXT=""
                  if [ "${{ runner.os }}" == "Windows" ]; then
                    CLI_EXT=".exe"
                  fi
                  mkdir -p dist
                  go build -ldflags="-s -w" -o dist/index-server-cli-${OS_SUFFIX}${CLI_EXT} ./cmd/index-server/main.go
                  go build -ldflags="-s -w" -o dist/peer-cli-${OS_SUFFIX}${CLI_EXT} ./cmd/peer/main.go
              shell: bash

            - name: Install system dependencies (Linux)
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev pkg-config

            - name: Build GUI application (Wails)
              working-directory: gui/peer
              run: |
                  OS_SUFFIX=${{ steps.os_suffix.outputs.suffix }}
                  GUI_OUTPUT_NAME="peer-gui-${OS_SUFFIX}"
                  wails build --platform ${{ matrix.build.platform }} -tags webkit2_41 -clean -o "${GUI_OUTPUT_NAME}" -ldflags="-s -w"
              shell: bash

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: binaries-${{ steps.os_suffix.outputs.suffix }}
                  path: |
                      dist/
                      gui/peer/build/bin/

    security:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run Nancy (vulnerability scanner)
              run: |
                  go install github.com/sonatype-nexus-community/nancy@latest
                  go list -json -deps ./... | nancy sleuth

    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: [test, lint, build]
        if: startsWith(github.ref, 'refs/tags/v')
        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      binaries-*/dist/*
                      binaries-*/gui/peer/build/bin/*
                      binaries-*/gui/peer/build/bin/peer.app/Contents/MacOS/*
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
